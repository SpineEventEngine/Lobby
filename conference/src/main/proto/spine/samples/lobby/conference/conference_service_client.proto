//
// Copyright 2015, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.samples.lobby.conference;

option java_package="org.spine3.samples.lobby.conference";
option java_outer_classname = "ConferenceServiceProto";
option java_multiple_files = true;

import "spine/samples/lobby/common/common.proto";
import "spine/samples/lobby/conference/contracts/conference.proto";
import "spine/base/email.proto";
import "spine/time/time.proto";
import "spine/money/money.proto";


service ConferenceServiceClient {
    rpc createConference(ConferenceInfo) returns (CreateConferenceResponse){}
    rpc findConference(FindConferenceRequest) returns (spine.samples.lobby.conference.contracts.Conference){}
    rpc findConferenceByID(FindConferenceByIDRequest) returns (spine.samples.lobby.conference.contracts.Conference){}
    rpc updateConference(EditableConferenceInfo) returns (UpdateConferenceResponse){}
    rpc publish(PublishConferenceRequest) returns (PublishConferenceResponse){}
    rpc unPublish(UnpublishConferenceRequest) returns (UnpublishConferenceResponse){}

    rpc createSeat(spine.samples.lobby.common.ConferenceId) returns (CreateSeatResponse){}
}

message ConferenceInfo {

    // The conference name. Used in the slug.
    string name = 2;

    // The conference description.
    string description = 3;

    // The location of the conference.
    string location = 4;

    // The part of the URL used to access the conference.
    spine.samples.lobby.common.ConferenceSlug slug = 5;

    // The tagline of the conference.
    string tagline = 6;

    // The search query for Twitter.
    string twitter_search = 7;

    // The start date of the conference.
    spine.time.LocalDate start_date = 8;

    // The end date of the conference.
    spine.time.LocalDate end_date = 9;

    // The types of seats available for the conference.
//    repeated spine.samples.lobby.common.SeatType seat_type = 10;

    // The info about the owner of the conference.
    spine.samples.lobby.common.PersonalInfo owner = 11;

    // If the conference is published it is visible for users.
    bool is_published = 12;

}
message CreateConferenceResponse {
    spine.samples.lobby.common.ConferenceId id = 1;
    string accessCode = 2;
}

message EditableConferenceInfo {
    // The unique conference id.
    spine.samples.lobby.common.ConferenceId id = 1;

    // The conference name. Used in the slug.
    string name = 2;

    // The conference description.
    string description = 3;

    // The location of the conference.
    string location = 4;

    // The part of the URL used to access the conference.
    spine.samples.lobby.common.ConferenceSlug slug = 5;

    // The tagline of the conference.
    string tagline = 6;

    // The search query for Twitter.
    string twitter_search = 7;

    // The start date of the conference.
    spine.time.LocalDate start_date = 8;

    // The end date of the conference.
    spine.time.LocalDate end_date = 9;

    // The types of seats available for the conference.
    //    repeated spine.samples.lobby.common.SeatType seat_type = 10;

    // The info about the owner of the conference.
    spine.samples.lobby.common.PersonalInfo owner = 11;

    // If the conference is published it is visible for users.
    bool is_published = 12;
}

message UpdateConferenceResponse {
    spine.samples.lobby.common.ConferenceId id = 1;
}

message FindConferenceRequest {
    spine.base.EmailAddress emailAddress = 1;
    string accessCode = 2;
}

message FindConferenceByIDRequest {
    spine.samples.lobby.common.ConferenceId id = 1;
}

message PublishConferenceResponse {
    spine.samples.lobby.common.ConferenceId id = 1;
}

message PublishConferenceRequest {
    spine.samples.lobby.common.ConferenceId id = 1;
}

message UnpublishConferenceRequest {
    spine.samples.lobby.common.ConferenceId id = 1;
}

message UnpublishConferenceResponse {
    spine.samples.lobby.common.ConferenceId id = 1;
}

message CreateSeateTypeRequest {
    SeatTypeInfo seatTypeInfo = 1;
    
}

message SeatTypeInfo {

    // The name of the seat type.
    string name = 3;

    // The description of the seat type.
    string description = 4;

    // The price of the seat of this type.
    spine.money.Money price = 5;

    // The total quantity of seats for the conference.
    int32 quantity_total = 6;

    // The available quantity of seats for the conference.
    int32 quantity_available = 7;
}

message CreateSeatResponse {
    // The unique seat type id.
    spine.samples.lobby.common.SeatTypeId id = 1;
}
