//
// Copyright 2015, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package spine.samples.lobby.registration.seat.assignment;

option (type_url_prefix) = "type.lobby.spine3.org";
option java_package="org.spine3.samples.lobby.registration.seat.assignment";
option java_outer_classname = "SeatAssignmentsCommandsProto";
option java_multiple_files = true;

import "spine/annotations.proto";
import "spine/samples/lobby/common/common.proto";
import "spine/samples/lobby/registration/contracts/registration.proto";
import "spine/samples/lobby/registration/seat/assignment/seat_assignments.proto";

// The request to create a new seat assignments aggregate.
// Is sent as the result of an order confirmation.
message CreateSeatAssignments {
    // TODO:2016-02-29:alexander.litus: add SeatAssignmentsId

    // The ID of the confirmed order.
    spine.samples.lobby.common.OrderId order_id = 1;

    // The set of order seat items representing seat quantities of different types.
    repeated spine.samples.lobby.registration.contracts.SeatQuantity seat = 2;
}

// The request to assign the seat to the attendee.
// Is sent as the result of a registrant interaction with the UI.
message AssignSeat {
    // The ID of the seat assignments aggregate.
    spine.samples.lobby.registration.contracts.SeatAssignmentsId seat_assignments_id = 1;

    // The info about an attendee.
    spine.samples.lobby.common.PersonalInfo attendee = 2;

    // The position of the assigned seat.
    spine.samples.lobby.registration.contracts.SeatPosition position = 3;
}

// The request to unassign the seat from the attendee.
message UnassignSeat {
    // The ID of the seat assignments aggregate.
    spine.samples.lobby.registration.contracts.SeatAssignmentsId seat_assignments_id = 1;

    // The position of the seat to unassign.
    spine.samples.lobby.registration.contracts.SeatPosition position = 2;
}
