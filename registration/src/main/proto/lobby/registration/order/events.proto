//
// Copyright 2015, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package lobby.registration.order;

option java_package="lobby.registration.order";
option java_outer_classname = "RegistrationOrderEventsProto";
option java_multiple_files = true;

import "lobby/registration/order/order.proto";
import "lobby/registration/conference.proto";
import "lobby/registration/seats/seats.proto";
import "google/protobuf/timestamp.proto";
import "spine/money/money.proto";

// The event propagated when an order is placed by a registrant.
message OrderPlaced {
    // The ID of the order.
    OrderId order_id = 1;

    // The ID of the related conference.
    ConferenceId conference_id = 2;

    // The order items representing the quantity of seats of different types at the conference.
    repeated lobby.registration.seats.SeatQuantity seat = 3;

    // The expected expiration time if the reservation is not explicitly confirmed later.
    google.protobuf.Timestamp reservationAutoExpiration = 4;

    // The conference locator access code.
    lobby.registration.ConferenceAccessCode access_code = 5;
}

// The event propagated when an order is updated.
message OrderUpdated {
    // The ID of the order.
    OrderId order_id = 1;

    // The order items representing the quantity of seats of different types.
    repeated lobby.registration.seats.SeatQuantity seat = 2;
}

// The event propagated when an order reservation is completed.
message OrderReservationCompleted {
    // The ID of the order.
    OrderId order_id = 1;

    // The time of the reservation expiration.
    google.protobuf.Timestamp reservationExpiration = 2;

    // The order items representing the quantity of seats of different types.
    repeated lobby.registration.seats.SeatQuantity seat = 3;
}

// The event propagated when an order payment is confirmed.
message OrderPaymentConfirmed {
    // The ID of the order.
    OrderId order_id = 1;
}

// The event propagated when an order total price is calculated.
message OrderTotalsCalculated {
    // The ID of the order.
    OrderId order_id = 1;

    // The total price of the order.
    spine.money.Money total = 2;

    // The lines of the order.
    repeated lobby.registration.order.SeatOrderLine order_line = 3;
}

// The event propagated when an order is expired.
message OrderExpired {
    // The ID of the order.
    OrderId order_id = 1;
}

// The event propagated when an order is partially reserved.
message OrderPartiallyReserved {
    // The ID of the order.
    OrderId order_id = 1;

    // The time of the reservation expiration.
    google.protobuf.Timestamp reservationExpiration = 2;

    // The order items representing the quantity of seats of different types.
    repeated lobby.registration.seats.SeatQuantity seat = 3;
}

// The event propagated when a registrant is assigned to an order.
message OrderRegistrantAssigned {
    // The ID of the order.
    OrderId order_id = 1;

    // The personal info of the registrant.
    lobby.registration.seats.PersonalInfo personal_info = 2;
}
