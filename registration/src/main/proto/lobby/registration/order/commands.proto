//
// Copyright 2015, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package lobby.registration.order;

option java_package="lobby.registration.order";
option java_outer_classname = "RegistrationOrderCommandsProto";
option java_multiple_files = true;

import "lobby/registration/order/order.proto";
import "lobby/registration/conference.proto";
import "lobby/registration/seats/seats.proto";

// The request to assign the registrant to the order.
// Is sent as the result of a registrant interaction with the UI.
message AssignRegistrationDetails {
    // The ID of the order.
    lobby.registration.order.OrderId order_id = 1;

    // The info about the registrant.
    lobby.registration.seats.PersonalInfo registrant = 2;
}

// The request to assign the seat to the attendee.
// Is sent as the result of a registrant interaction with the UI.
message AssignSeat {
    // The ID of the order.
    lobby.registration.order.OrderId order_id = 1;

    // The info about the registrant.
    lobby.registration.seats.PersonalInfo registrant = 2;
}



// The request to create a new order.
// Is sent as the result of a registrant interaction with the UI.
message CreateOrder {
    // The ID of the new order.
    lobby.registration.order.OrderId order_id = 1;

    // The ID of the conference.
    ConferenceId conference_id = 2;

    // The order items representing the quantity of seats at the conference.
    repeated lobby.registration.seats.SeatQuantity seat = 3;
}

// The request to reserve the order.
// Is sent from a RegistrationProcessManager to an Order aggregate as the result of a ReservationConfirmed event.
message ReserveOrder {
    // The ID of the order to reserve.
    lobby.registration.order.OrderId order_id = 1;
}

// The request to reject the order.
// Is sent from a RegistrationProcessManager to an Order aggregate as the result of a ReservationRejected or ReservationExpired event.
message RejectOrder {
    // The ID of the order to reject.
    lobby.registration.order.OrderId order_id = 1;
}

// The request to confirm the order.
// Is sent from a RegistrationProcessManager to an Order aggregate as the result of a PaymentConfirmed event.
message ConfirmOrder {
    // The ID of the order to confirm.
    lobby.registration.order.OrderId order_id = 1;
}
