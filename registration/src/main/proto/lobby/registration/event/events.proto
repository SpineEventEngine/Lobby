//
// Copyright 2015, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package lobby.registration.event;

option java_package="lobby.registration.event";
option java_outer_classname = "RegistrationEventsProto";
option java_multiple_files = true;

import "lobby/registration/order.proto";
import "lobby/registration/conference.proto";

// The event propagated when a MakeOrder command handled in an Order aggregate.
message OrderCreated {
    // The ID of the order.
    OrderId order_id = 1;
    // The order items.
    repeated SeatItem seat = 2;
}

// The event propagated from an Order aggregate when an AcceptOrder command handled in an Order aggregate.
message OrderAccepted {
    // The ID of the order to accept.
    OrderId order_id = 1;
}

// The event propagated from an Order aggregate when a RejectOrder command handled in an Order aggregate.
message OrderRejected {
    // The ID of the order to reject.
    OrderId order_id = 1;
}

// The event propagated from a Reservation aggregate when the system has temporarily reserved the needed quantity of seats.
message ReservationAccepted {
    // The ID of the reservation to accept.
    lobby.registration.ReservationId reservation_id = 1;
}

// The event propagated from a Reservation aggregate when the available quantity of seats is insufficient.
message ReservationRejected {
    // The ID of the reservation to reject.
    lobby.registration.ReservationId reservation_id = 1;
}

// The event propagated when the payment for the order is received.
message PaymentReceived {
    // The ID of the reservation.
    lobby.registration.ReservationId reservation_id = 1;
}
