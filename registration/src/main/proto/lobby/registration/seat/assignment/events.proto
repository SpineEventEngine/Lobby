//
// Copyright 2015, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package lobby.registration.seat.assignment;

option java_package="lobby.registration.seat.assignment";
option java_outer_classname = "SeatAssignmentsEventsProto";
option java_multiple_files = true;

import "lobby/registration/seat/assignment/seat_assignments.proto";
import "lobby/registration/seat/availability/seats_availability.proto";
import "lobby/registration/order/order.proto";
import "lobby/registration/conference.proto";

// The event propagated when a seat assignment is created.
message SeatAssignmentsCreated {
    // The ID of the reservation.
    lobby.registration.seat.availability.ReservationId reservation_id = 1;

    // The ID of the order.
    lobby.registration.order.OrderId order_id = 2;

    // The short seat assignment info objects.
    repeated SeatAssignmentInfo seat = 3;

    // The short seat assignment info object.
    message SeatAssignmentInfo {
        // The position of the seat.
        lobby.registration.seat.assignment.SeatPosition position = 1;

        // The ID of the seat type.
        lobby.registration.SeatTypeId seat_type_id = 2;
    }
}

// The event propagated when a seat assignment is updated.
message SeatAssignmentUpdated {
    // The ID of the reservation.
    lobby.registration.seat.availability.ReservationId reservation_id = 1;

    // The position of the seat.
    lobby.registration.seat.assignment.SeatPosition position = 2;

    // The personal info of the attendee.
    lobby.registration.seat.assignment.PersonalInfo attendee = 3;
}

// The event propagated when a seat is assigned to an attendee.
message SeatAssigned {
    // The ID of the reservation.
    lobby.registration.seat.availability.ReservationId reservation_id = 1;

    // The position of the seat.
    lobby.registration.seat.assignment.SeatPosition position = 2;

    // The ID of the seat type.
    lobby.registration.SeatTypeId seat_type_id = 3;

    // The personal info of the attendee.
    lobby.registration.seat.assignment.PersonalInfo attendee = 4;
}

// The event propagated when a seat is unassigned from an attendee.
message SeatUnassigned {
    // The ID of the reservation.
    lobby.registration.seat.availability.ReservationId reservation_id = 1;

    // The position of the seat.
    lobby.registration.seat.assignment.SeatPosition position = 2;
}
