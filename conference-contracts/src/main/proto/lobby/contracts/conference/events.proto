//
// Copyright 2015, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package lobby.contracts.conference;

option java_package="lobby.contracts.conference";
option java_outer_classname = "ConferenceContractsEventsProto";
option java_multiple_files = true;

import "lobby/contracts/common/common.proto";
import "lobby/contracts/conference/conference.proto";

// The event propagated when a conference is created by a business customer.
message ConferenceCreated {
    // The info about the created conference.
    lobby.contracts.conference.Conference conference = 1;
}

// The event propagated when a conference is updated by a business customer.
message ConferenceUpdated {
    // The info about the updated conference.
    lobby.contracts.conference.Conference conference = 1;
}

// The event propagated when a conference is made public.
message ConferencePublished {
    // The ID of the conference.
    lobby.contracts.common.ConferenceId conference_id = 1;
}

// The event propagated when a previously public conference is made private by unpublishing it.
message ConferenceUnpublished {
    // The ID of the conference.
    lobby.contracts.common.ConferenceId conference_id = 1;
}

// The event propagated when a seat type is created by a business customer.
message SeatTypeCreated {
    // The new seat type.
    lobby.contracts.common.SeatType seat_type = 2;
}

// The event propagated when a seat type is updated by a business customer.
message SeatTypeUpdated {
    // The type of the seat.
    lobby.contracts.common.SeatType seat_type = 2;
}
