//
// Copyright 2015, TeamDev Ltd. All rights reserved.
//
// Redistribution and use in source and/or binary forms, with or without
// modification, must retain the above copyright notice and the following
// disclaimer.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
syntax = "proto3";

package lobby.contracts.registration;

option java_package="lobby.contracts.registration";
option java_outer_classname = "RegistrationContractsProto";
option java_multiple_files = true;

import "spine/money/money.proto";
import "spine/base/person.proto";
import "spine/base/email.proto";

// The ID of the seat type.
message SeatTypeId {
    // The UUID-based value of the seat type ID.
    string uuid = 1;
}

// The quantity of seats of the given type.
message SeatQuantity {
    // The seat type ID.
    SeatTypeId seat_type_id = 1;

    // The quantity of seats of the given type.
    int32 quantity = 2;
}

// The line of the order.
message SeatOrderLine {
    // The total price for the order line.
    spine.money.Money line_total = 1;

    // The price of the order unit (seat).
    spine.money.Money unit_price = 2;

    // The ID of the type of the seats.
    SeatTypeId seat_type_id = 3;

    // The quantity of the order units (seats).
    int32 quantity = 4;
}

// The position of the seat.
message SeatPosition {
    // The integer-based value of the seat position.
    int32 position = 1;
}

// The conference locator access code.
// Used by a business customer (conference owner) to view conference details.
// Generated when the business customer creates the conference.
message ConferenceAccessCode {
    // The string value of the access code.
    string value = 1;
}

// The info about a person.
message PersonalInfo {
    // The person's name.
    spine.base.PersonName name = 1;

    // The person's email.
    spine.base.EmailAddress email = 2;
}
